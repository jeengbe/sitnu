/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { createHandlerBoundToURL, precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL; }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL; }) => {
    if (!url.pathname.startsWith("/api/timetable/")) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  new NetworkFirst({
    networkTimeoutSeconds: 3,
    plugins: [{
      cacheWillUpdate: async params => {
        const responseText = await params.response.text();
        const newBody = responseText.substr(0, responseText.length - 1) + ",\"date\":" + new Date().getTime() + "}";

        return new Response(newBody, {
          ...params.response
        });
      },
      cachedResponseWillBeUsed: async params => {
        const responseText = await params.cachedResponse?.text();
        if (responseText !== undefined) {
          const newBody = responseText.substr(0, responseText.length - 1) + ",\"offline\":true}";

          return new Response(newBody, {
            ...params.cachedResponse!
          });
        }
      },
    }]
  })
);

self.addEventListener("push", async event => {
  try {
    const data = event.data?.json();
    if (data === undefined) return;

    await self.registration.showNotification(data.state === "CANCEL" ? "Entfall" : "Änderung", {
      body: "Eine Stunde " + (data.state === "CANCEL" ? "entfällt" : "wurde geändert"),
      actions: [{
        action: "explore", title: "Vertretungsplan öffnen"
      }]
    });

  } catch (err) {
    console.error(err);
    console.log(event, event.data?.text());
  }
});

self.addEventListener("notificationclick", event => {
  event.notification.close();
  if (event.action !== "close") {
    self.clients.openWindow("/");
  }
});
